{"version":3,"sources":["style/themeFunctions.ts","style/theme.ts","utils/fn.ts","components/Button/style.ts","components/Button/index.tsx","components/Input/style.ts","components/Input/index.tsx","components/Form/style.ts","components/Form/index.tsx","components/Layout/index.tsx","containers/Login/index.tsx","components/Message/index.tsx","components/Chat/style.ts","components/Chat/index.tsx","containers/Home/index.tsx","containers/SignUp/index.tsx","containers/ResetPassword/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["colorBackground","props","theme","color","background","colorText","text","spacingDefault","spacing","default","themeSpacingLarge","large","link","buttonText","secondary","grid","maxWidth","width","fullPageFormWidth","borderRadius","border","font","small","medium","GlobalStyle","createGlobalStyle","noop","ButtonContainer","styled","button","React","memo","prop","onClick","children","rest","InputContainer","label","Input","name","onChange","onKeyPress","placeholder","value","type","event","data-lpignore","FormContainer","form","Form","onSubmit","e","LayoutSmall","div","LayoutMedium","LOGIN","gql","Login","useState","credentials","setCredentials","useMutation","login","data","client","useApolloClient","to","preventDefault","variables","catch","err","writeData","errors","SpeechBubble","size","mood","email","target","required","password","Message","author","message","style","marginBottom","ChatContainer","displayName","MESSAGES_SUBSCRIPTION","lastMessage","SEND_MESSAGE","MemoInputContainer","setValue","sendMessage","onSend","className","key","Chat","messages","setMessages","useSubscription","error","messageAdded","map","i","NavTabs","SIGNUP","SignUp","signup","firstName","lastName","SEND_PASSWORD_RESET_EMAIL","setEmail","useLazyQuery","sendPasswordResetEmail","called","loading","formStateMap","defaultState","success","textAlign","role","aria-label","state","App","path","exact","component","Home","ResetPassword","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","process","http","development","production","test","ws","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","split","query","definition","getMainDefinition","kind","operation","ApolloClient","ApolloLink","from","onError","graphQLErrors","networkError","forEach","locations","cache","InMemoryCache","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7da37411.chunk.js","sourcesContent":["import { DefaultTheme } from \"styled-components\";\n\ninterface Props {\n  theme: DefaultTheme;\n}\n\nexport const colorBackground = (props: Props) => props.theme.color.background;\nexport const colorBackgroundDarkMode = (props: Props) =>\n  props.theme.color.colorBackgroundDarkMode;\nexport const colorButtonText = (props: Props) => props.theme.color.buttonText;\nexport const colorSecondary = (props: Props) => props.theme.color.secondary;\nexport const colorLink = (props: Props) => props.theme.color.link;\nexport const colorText = (props: Props) => props.theme.color.text;\nexport const fontMedium = (props: Props) => props.theme.font.medium;\nexport const fontSmall = (props: Props) => props.theme.font.small;\nexport const gridFullPageFormWidth = (props: Props) =>\n  props.theme.grid.fullPageFormWidth;\nexport const gridWidth = (props: Props) => props.theme.grid.width;\nexport const gridMaxWidth = (props: Props) => props.theme.grid.maxWidth;\nexport const spacingBorder = (props: Props) => props.theme.spacing.border;\nexport const spacingBorderRadius = (props: Props) =>\n  props.theme.spacing.borderRadius;\nexport const spacingDefault = (props: Props) => props.theme.spacing.default;\nexport const themeSpacingLarge = (props: Props) => props.theme.spacing.large;\n","import { DefaultTheme, createGlobalStyle } from \"styled-components\";\nimport { colorText, colorBackground, colorLink } from \"./themeFunctions\";\n\nconst darkMode = false;\n// window.matchMedia &&\n// window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n\nexport const theme: DefaultTheme = {\n  color: {\n    background: darkMode ? \"#282c34\" : \"#FFFFFF\",\n    link: \"#000\",\n    buttonText: \"#fffffe\",\n    text: darkMode ? \"#FFFFFF\" : \"#000\",\n    secondary: \"#000\",\n  },\n  grid: {\n    maxWidth: \"1600px\",\n    width: \"800px\",\n    fullPageFormWidth: \"90%\",\n  },\n  spacing: {\n    default: \"10px\",\n    borderRadius: \"4px\",\n    border: \"1px\",\n    large: \"50px\",\n  },\n  font: {\n    small: \"12px\",\n    medium: \"14px\",\n  },\n};\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    color: ${colorText};\n    background: ${colorBackground};\n  }\n  a {\n    text-decoration: none;\n    color: ${colorLink};\n  }\n`;\n","export const noop = () => {};\n","import styled from \"styled-components\";\n\nexport const ButtonContainer = styled.button`\n  line-height: 1rem;\n  user-select: none;\n  position: relative;\n  text-align: center;\n  display: inline-block;\n  vertical-align: middle;\n  white-space: nowrap;\n  background-image: none;\n  cursor: pointer;\n  filter: none;\n  font-weight: 600;\n  color: rgb(255, 255, 255);\n  background-color: black;\n  font-size: 1rem;\n  min-height: 48px;\n  border-radius: 2px;\n  border-width: 1px;\n  border-style: solid;\n  transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n  text-decoration: none;\n  border-color: black;\n  padding: 0.9rem 2rem;\n  &:hover {\n    color: rgb(255, 255, 255);\n    background-color: rgb(47, 140, 174);\n    border-color: rgb(47, 140, 174);\n    text-decoration: none !important;\n  }\n`;\n","import React from \"react\";\nimport { noop } from \"utils/fn\";\nimport { ButtonContainer } from \"./style\";\n\nconst Button = (prop: any) => {\n  const { onClick = noop, children = \"\", ...rest } = prop;\n  return (\n    <ButtonContainer onClick={onClick} {...rest}>\n      {children}\n    </ButtonContainer>\n  );\n};\nexport default React.memo(Button);\n","import styled from \"styled-components\";\nimport {\n  spacingDefault,\n  colorBackground,\n  colorText,\n  fontMedium,\n} from \"style/themeFunctions\";\n\nexport const InputContainer = styled.label`\n  font-size: ${fontMedium};\n  input {\n    border: none;\n    border-bottom: 1px solid grey;\n    background: transparent;\n    box-shadow: 0 0 0 1000px ${colorBackground} inset;\n    -webkit-box-shadow: 0 0 0px 1000px ${colorBackground} inset;\n    outline: none;\n    padding: ${spacingDefault} 0;\n    width: 100%;\n    color: ${colorText} !important;\n  }\n\n  input::placeholder,\n  input:-webkit-autofill,\n  input:-webkit-autofill:focus,\n  input:-webkit-autofill:active {\n    box-shadow: 0 0 0 1000px ${colorBackground} inset;\n    -webkit-text-fill-color: ${colorText};\n  }\n`;\n","import React from \"react\";\nimport { noop } from \"utils/fn\";\nimport { InputContainer } from \"./style\";\n\ninterface Props {\n  name?: string;\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  onKeyPress?: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n  placeholder?: string;\n  required?: boolean;\n  style?: {\n    [key: string]: string;\n  };\n  type?: string;\n  value?: string;\n}\n\nconst Input: React.FC<Props> = ({\n  name = \"\",\n  onChange = noop,\n  onKeyPress = noop,\n  placeholder = \"\",\n  type = \"text\",\n  value,\n  ...rest\n}) => {\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (onChange) {\n      onChange(event);\n    }\n  };\n\n  return (\n    <InputContainer>\n      {name}\n      <br />\n      <input\n        placeholder={placeholder}\n        onChange={handleChange}\n        onKeyPress={onKeyPress}\n        value={value}\n        {...rest}\n        data-lpignore=\"true\"\n      />\n    </InputContainer>\n  );\n};\nexport default Input;\n","import styled from \"styled-components\";\nimport { spacingDefault, fontSmall } from \"style/themeFunctions\";\n\nexport const FormContainer = styled.form`\n  a {\n    font-size: ${fontSmall};\n  }\n\n  > * {\n    width: 100%;\n    display: block;\n    margin-bottom: ${spacingDefault};\n  }\n\n  img {\n    width: auto;\n    margin: 20px auto;\n    height: 40px;\n    display: block;\n  }\n\n  h1,\n  a,\n  div {\n    text-align: center;\n  }\n`;\n","import React from \"react\";\nimport { noop } from \"utils/fn\";\nimport { FormContainer } from \"./style\";\n\nexport default function Form(prop: { onSubmit?: Function; children?: any }) {\n  const { onSubmit = noop, children = \"\" } = prop;\n  return (\n    <FormContainer onSubmit={(e: React.FormEvent) => onSubmit(e)}>\n      {children}\n    </FormContainer>\n  );\n}\n","import styled from \"styled-components\";\nimport {\n  spacingDefault,\n  gridFullPageFormWidth,\n  themeSpacingLarge,\n  gridWidth,\n  gridMaxWidth\n} from \"style/themeFunctions\";\n\nexport const LayoutSmall = styled.div`\n  margin: ${themeSpacingLarge} auto ${spacingDefault};\n  max-width: 365px;\n`;\n\nexport const LayoutMedium = styled.div`\n  max-width: ${gridWidth};\n  margin: ${themeSpacingLarge} auto ${spacingDefault};\n`;\n\nexport const LayoutLarge = styled.div`\n  @media (min-width: ${gridFullPageFormWidth}) {\n    max-width: ${gridMaxWidth};\n    padding: ${spacingDefault};\n    margin: 0 auto;\n  }\n`;\n","import React, { useState } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport gql from \"graphql-tag\";\nimport { useMutation, useApolloClient } from \"@apollo/react-hooks\";\nimport Button from \"components/Button\";\nimport Input from \"components/Input\";\nimport Form from \"components/Form\";\nimport { LayoutSmall } from \"components/Layout\";\nimport { SpeechBubble } from \"react-kawaii\";\n\nconst LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password)\n  }\n`;\n\nexport default function Login(props: any) {\n  const [credentials, setCredentials] = useState({});\n  const [login, { data }] = useMutation(LOGIN);\n  const client = useApolloClient();\n\n  if (\n    data &&\n    data.login !==\n      \"The password is invalid or the user does not have a password.\" &&\n    data.login !==\n      \"Too many unsuccessful login attempts. Please try again later.\"\n  ) {\n    return <Redirect to=\"/dashboard\" />;\n  }\n\n  return (\n    <LayoutSmall>\n      <Form\n        onSubmit={(e: React.ChangeEvent<HTMLInputElement>) => {\n          e.preventDefault();\n          if (credentials) {\n            login({ variables: credentials }).catch(err => {\n              client.writeData({ data: { errors: err } });\n            });\n          }\n        }}\n      >\n        <SpeechBubble size={80} mood=\"happy\" color=\"#83D1FB\" />\n        <Input\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n            setCredentials({\n              ...credentials,\n              email: e.target.value\n            })\n          }\n          name=\"Email\"\n          type=\"email\"\n          required\n        />\n        <Input\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n            setCredentials({\n              ...credentials,\n              password: e.target.value\n            })\n          }\n          name=\"Password\"\n          type=\"password\"\n          required\n        />\n        <Button>Sign In</Button>\n        <Link to=\"/forgot-password\">Forgot password?</Link>\n        <Link to=\"/signup\">{\"Don't have an account? Sign Up\"}</Link>\n      </Form>\n    </LayoutSmall>\n  );\n}\n","import React from \"react\";\n\ntype Props = {\n  author: string;\n  message: string;\n};\n\nconst Message: React.FC<Props> = ({ author, message }) => {\n  return (\n    <div style={{ marginBottom: \"10px\" }}>\n      <strong>{author}:</strong>&nbsp;<span>{message}</span>\n    </div>\n  );\n};\nexport default Message;\n","import styled from \"styled-components\";\n\nconst ChatContainer = styled.div`\n  background: #fff;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n  height: 500px;\n  margin-bottom: 25px;\n  padding: 50px;\n  flex-direction: column;\n  justify-content: space-between;\n  display: flex;\n\n  .ChatContainer {\n    &__input-container {\n      display: flex;\n\n      > :first-child {\n        flex-grow: 1;\n      }\n\n      > :last-child {\n        margin-left: 15px;\n      }\n    }\n  }\n`;\nChatContainer.displayName = \"ChatContainer\";\nexport default ChatContainer;\n","import React, { useState } from \"react\";\nimport gql from \"graphql-tag\";\nimport { useMutation, useSubscription } from \"@apollo/react-hooks\";\nimport Input from \"components/Input\";\nimport Button from \"components/Button\";\nimport Message from \"components/Message\";\nimport { noop } from \"utils/fn\";\nimport ChatContainer from \"./style\";\n\ntype Message = {\n  author: string;\n  message: string;\n};\n\nconst MESSAGES_SUBSCRIPTION = gql`\n  subscription onMessageAdded {\n    messageAdded {\n      author\n      message\n    }\n  }\n`;\nlet lastMessage = \"\";\nconst Chat: React.FC = () => {\n  const [name, setName] = useState(\"bubby\");\n  const [messages, setMessages] = useState([\n    { author: \"Admin\", message: \"Don't be shy, say something!\" }\n  ]);\n  const { data, error } = useSubscription(MESSAGES_SUBSCRIPTION);\n\n  if (error) {\n    return <>\"you broke it you buy it!\"</>;\n  }\n\n  if (data?.messageAdded && data.messageAdded.message !== lastMessage) {\n    const { author, message } = data.messageAdded;\n    setMessages([...messages, ...[{ author, message }]]);\n    lastMessage = message;\n  }\n\n  const onChange = ({\n    target: { value }\n  }: React.ChangeEvent<HTMLInputElement>) => setName(value);\n\n  const renderMessages = () => {\n    return messages.map(({ author, message }: Message, i) => (\n      <Message author={author} key={i} message={message} />\n    ));\n  };\n\n  return (\n    <ChatContainer className=\"ChatContainer\">\n      <div>\n        <article className=\"ChatContainer__message-container\">\n          {renderMessages()}\n        </article>\n      </div>\n      <MemoInputContainer name={name} />\n    </ChatContainer>\n  );\n};\n\nconst SEND_MESSAGE = gql`\n  mutation addMessage($author: String!, $message: String!) {\n    addMessage(author: $author, message: $message) {\n      author\n      message\n    }\n  }\n`;\n\ntype Props = {\n  name: string;\n};\n\nconst InputContainer: React.FC<Props> = ({ name }) => {\n  const [value, setValue] = useState(\"\");\n  const [sendMessage] = useMutation(SEND_MESSAGE);\n\n  const onChange = ({\n    target: { value }\n  }: React.ChangeEvent<HTMLInputElement>): void => setValue(value);\n\n  const onKeyPress = ({ key }: React.KeyboardEvent<HTMLInputElement>): void => {\n    if (key === \"Enter\" && value) {\n      onSend(value);\n    }\n  };\n\n  const onClick = (): void => {\n    if (value) {\n      onSend(value);\n    }\n  };\n\n  const onSend = (value: string): void => {\n    setValue(\"\");\n    sendMessage({\n      variables: { author: name, message: value }\n    }).catch(noop);\n  };\n\n  return (\n    <div className=\"ChatContainer__input-container\">\n      <Input\n        onChange={onChange}\n        onKeyPress={onKeyPress}\n        placeholder=\"enter your message...\"\n        value={value}\n      />\n      <Button onClick={onClick}>Send Message</Button>\n    </div>\n  );\n};\nconst MemoInputContainer = React.memo(InputContainer);\n\nexport default Chat;\n","import React from \"react\";\nimport Chat from \"components/Chat\";\nimport { LayoutMedium } from \"components/Layout\";\n\nexport default function NavTabs() {\n  return (\n    <LayoutMedium>\n      <Chat />\n    </LayoutMedium>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport gql from \"graphql-tag\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport Input from \"components/Input\";\nimport Form from \"components/Form\";\nimport Button from \"components/Button\";\nimport { LayoutSmall } from \"components/Layout\";\n\nconst SIGNUP = gql`\n  mutation signup(\n    $email: String!\n    $password: String!\n    $firstName: String!\n    $lastName: String!\n  ) {\n    signup(\n      email: $email\n      password: $password\n      firstName: $firstName\n      lastName: $lastName\n    )\n  }\n`;\n\nexport default function SignUp() {\n  const [credentials, setCredentials] = useState({});\n  const [signup, { data }] = useMutation(SIGNUP);\n\n  if (data) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <LayoutSmall>\n      <Form\n        onSubmit={(e: React.ChangeEvent<HTMLInputElement>) => {\n          e.preventDefault();\n          if (credentials) {\n            signup({ variables: credentials });\n          }\n        }}\n      >\n        <Input\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n            setCredentials({\n              ...credentials,\n              firstName: e.target.value\n            })\n          }\n          name=\"First Name\"\n          required\n        />\n        <Input\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n            setCredentials({\n              ...credentials,\n              lastName: e.target.value\n            })\n          }\n          name=\"Last Name\"\n          required\n        />\n        <Input\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n            setCredentials({\n              ...credentials,\n              email: e.target.value\n            })\n          }\n          name=\"Email\"\n          required\n        />\n        <Input\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n            setCredentials({\n              ...credentials,\n              password: e.target.value\n            })\n          }\n          name=\"Password\"\n          type=\"password\"\n          required\n        />\n        <Button type=\"submit\">Sign Up</Button>\n        <Link to=\"login\">Already have an account? Sign in</Link>\n      </Form>\n    </LayoutSmall>\n  );\n}\n","import React, { useState, ReactNode } from \"react\";\nimport gql from \"graphql-tag\";\nimport { useLazyQuery } from \"@apollo/react-hooks\";\nimport Input from \"components/Input\";\nimport Form from \"components/Form\";\nimport Button from \"components/Button\";\nimport { LayoutSmall } from \"components/Layout\";\n\ninterface FormStateMap {\n  [index: string]: ReactNode;\n}\n\nconst SEND_PASSWORD_RESET_EMAIL = gql`\n  query sendPasswordResetEmail($email: String!) {\n    sendPasswordResetEmail(email: $email)\n  }\n`;\n\nexport default function SignUp() {\n  const [email, setEmail] = useState({});\n  const [\n    sendPasswordResetEmail,\n    { called, data, error, loading }\n  ] = useLazyQuery(SEND_PASSWORD_RESET_EMAIL);\n  const formStateMap: FormStateMap = {\n    defaultState: (\n      <Form\n        onSubmit={(e: React.ChangeEvent<HTMLInputElement>) => {\n          e.preventDefault();\n          sendPasswordResetEmail({ variables: { email } });\n        }}\n      >\n        <h1>🏕</h1>\n        <Input\n          name=\"Email\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n            setEmail(e.target.value)\n          }\n          required\n          type=\"email\"\n        />\n        <Button type=\"submit\">Submit</Button>\n      </Form>\n    ),\n    loading: \"Loading...\",\n    error: \"Something went wrong. Please try again.\",\n    success: (\n      <>\n        <h1 style={{ textAlign: \"center\" }}>\n          <span role=\"img\" aria-label=\"UFO emoji\">\n            🛸\n          </span>\n        </h1>\n        <div>If an account exists, you should receive an email shortly.</div>\n      </>\n    )\n  };\n  let state: string = \"defaultState\";\n\n  if (called) {\n    if (loading) {\n      state = \"loading\";\n    }\n\n    if (error) {\n      state = \"error\";\n    }\n\n    if (data) {\n      state = \"success\";\n    }\n  }\n\n  return <LayoutSmall>{formStateMap[state]}</LayoutSmall>;\n}\n","import React from \"react\";\nimport { ThemeProvider } from \"styled-components\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport { theme, GlobalStyle } from \"./style/theme\";\nimport Login from \"./containers/Login\";\nimport Home from \"./containers/Home\";\nimport SignUp from \"./containers/SignUp\";\nimport ResetPassword from \"./containers/ResetPassword\";\n\nconst App: React.FC = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/home\" exact component={Home} />\n          <Route path=\"/login\" exact component={Login} />\n          <Route path=\"/signup\" component={SignUp} />\n          <Route path=\"/forgot-password\" component={ResetPassword} />\n        </Switch>\n      </Router>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL || \"\",\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import ApolloClient, { InMemoryCache } from \"apollo-boost\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink, split } from \"apollo-link\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"modern-normalize/modern-normalize.css\";\n\nconst environment = process.env.NODE_ENV;\n\nconsole.log(environment);\n\nconst config = {\n  http: {\n    development: \"https://bubby-gateway-server.herokuapp.com\",\n    production: \"https://bubby-gateway-server.herokuapp.com\",\n    test: \"\"\n  },\n  ws: {\n    development: \"ws://bubby-gateway-server.herokuapp.com/graphql\",\n    production: \"ws://bubby-gateway-server.herokuapp.com/graphql\",\n    test: \"\"\n  }\n};\n\n// Create an http link:\nconst httpLink = new HttpLink({\n  // uri: `${\n  //   isProduction ? \"https://bubby-apollo.netlify.com\" : `http${API}`\n  // }/.netlify/functions/graphql`\n  uri: config.http[environment]\n});\n\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: config.ws[environment],\n  options: {\n    reconnect: true\n  }\n});\n\n// using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === \"OperationDefinition\" &&\n      definition.operation === \"subscription\"\n    );\n  },\n  wsLink,\n  httpLink\n);\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([\n    onError(({ graphQLErrors, networkError }) => {\n      if (graphQLErrors)\n        graphQLErrors.forEach(({ message, locations, path }) =>\n          console.log(\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n          )\n        );\n      if (networkError) console.log(`[Network error]: ${networkError}`);\n    }),\n    link\n  ]),\n  cache: new InMemoryCache()\n});\n\n// const client = new ApolloClient({\n//   // uri: `${API}/.netlify/functions/graphql`,\n//   uri: API,\n//   cache: new InMemoryCache()\n// });\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}